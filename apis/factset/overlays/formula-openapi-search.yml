openapi: 3.0.0
info:
  title: FactSet Formula API
paths:
  /v1/time-series:
    get:
      summary: >-
        Retrieve data items (FQL formulas) for a list of identifiers or defined
        universe.
      description: >
        The `/time-series` endpoint is closely aligned with FactSet’s powerful
        data retrieval language **FactSet Query Language (FQL)** which is
        optimized for time-series analysis. FQL can also perform sophisticated
        statistical, mathematical, logical, and other complex operations on the
        data.

          This endpoint has a unique **TIMESERIES** data object that pairs the requested data with FactSet provided dates. This helps reduce the need for additional data requests and reduces the work required by users.

        The `/time-series` endpoint supports Long Running asynchronous requests
        up to **20 minutes** via the `batch` parameter. *This feature is
        available to Individual Users subscribed to the Performance Package and
        Performance Package Plus Performance Tiers and all Production Users. If
        you are unsure which Performance Tier you are subscribed to or you would
        like to gain access to the batch capabilities, please contact your
        FactSet Account Team or "Report Issue" above and our support teams can
        assist.*
      tags:
        - Time-Series
    post:
      summary: >-
        Retrieve data items (FQL formulas) for a list of identifiers or defined
        universe.
      description: >
        The `/time-series` endpoint is closely aligned with FactSet’s powerful
        data retrieval language **FactSet Query Language (FQL)** which is
        optimized for time-series analysis. FQL can also perform sophisticated
        statistical, mathematical, logical, and other complex operations on the
        data.

          This endpoint has a unique **TIMESERIES** data object that pairs the requested data with FactSet provided dates. This helps reduce the need for additional data requests and reduces the work required by users.

        The `/time-series` endpoint supports Long Running asynchronous requests
        up to **20 minutes** via the `batch` parameter. *This feature is
        available to Individual Users subscribed to the Performance Package and
        Performance Package Plus Performance Tiers and all Production Users. If
        you are unsure which Performance Tier you are subscribed to or you would
        like to gain access to the batch capabilities, please contact your
        FactSet Account Team or "Report Issue" above and our support teams can
        assist.*
      tags:
        - Time-Series
  /v1/cross-sectional:
    get:
      summary: >-
        Retrieve data items (Screening formulas) for a list of identifiers or
        defined universe.
      description: >
        The `/cross-sectional` endpoint is closely aligned with FactSet’s
        powerful data retrieval **Screening language** which is optimized for
        analysis of data items at single point in time for different entities
        and is extremely efficient for large universes.



        The `/cross-sectional` endpoint supports Long Running asynchronous
        requests up to **10 minutes** via the `batch` parameter. *This feature
        is available to Individual Users subscribed to the Performance Package
        and Performance Package Plus Performance Tiers and all Production Users.
        If you are unsure which Performance Tier you are subscribed to or you
        would like to gain access to the batch capabilities, please contact your
        FactSet Account Team or "Report Issue" above and our support teams can
        assist.*


        ***


        ### Iterated Cross-Sectional Functionality



        This endpoint supports the ability to automatically iterate through
        different cross sections over time. The **Iterated Cross-Sectional
        Functionality (ICSF)** expands the Cross-Sectional endpoint to support
        retrieving data items for *multiple dates*, allowing users to take
        advantage of the Screening engine’s efficiency even when history is
        required. 



        Use the parameters `startDate`, `endDate`, and `frequency` in the
        Cross-Sectional endpoint to provide your desired dates. Specify “0” in
        date argument of the Screening formulas provided in the formulas
        parameter and/or the universe parameter. Lastly, the Iterated
        Cross-Sectional Functionality is required to run as a `batch` request.
        Therefore, the batch parameter must be set to “Y”. 



        Access to backtesting and batch functionality is required to leverage
        the Iterated Cross-Sectional Functionality. 


        **When to use ICSF:**


        The ICSF can offer better performance than Time-Series requests when the
        date range is relatively small, and so it is recommended to use ICSF if
        the number of IDs requested is greater than the number of dates. If the
        number of dates is greater than the number of IDs in the request, it is
        recommended to use Time-Series.


        *Note: This is a general rule of thumb and performance may vary
        depending on the formulas in use.*
      tags:
        - Cross-Sectional
      operationId: getCrossSectionalData
      parameters:
        - $ref: '#/components/parameters/ids'
        - $ref: '#/components/parameters/symbolType'
        - $ref: '#/components/parameters/universe'
        - $ref: '#/components/parameters/universeType_cross_sectional'
        - $ref: '#/components/parameters/formulas_cross_sectional'
        - $ref: '#/components/parameters/backTestDate'
        - $ref: '#/components/parameters/calendar_cross_sectional'
        - $ref: '#/components/parameters/fsymId_cross_sectional'
        - $ref: '#/components/parameters/displayName_cross_sectional'
        - $ref: '#/components/parameters/flatten_cross_sectional'
        - $ref: '#/components/parameters/batch'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/frequency'
      responses:
        '200':
          description: >-
            Gets an array of `Response Objects` for a list of IDs and Screening
            formulas.
          headers:
            api-version:
              $ref: '#/components/headers/api-version'
            api-supported-versions:
              $ref: '#/components/headers/api-supported-versions'
            api-deprecated-versions:
              $ref: '#/components/headers/api-deprecated-versions'
            chain-id:
              $ref: '#/components/headers/chain-id'
            X-RateLimit-Limit-second:
              $ref: '#/components/headers/X-RateLimit-Limit-second'
            X-RateLimit-Remaining-second:
              $ref: '#/components/headers/X-RateLimit-Remaining-second'
            X-RateLimit-Limit-day:
              $ref: '#/components/headers/X-RateLimit-Limit-day'
            X-RateLimit-Remaining-day:
              $ref: '#/components/headers/X-RateLimit-Remaining-day'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cross_sectional_response'
              examples:
                Single Equity Id and Single Equity Data Item:
                  $ref: '#/components/examples/cross-sectional-singleId-singleItem'
                Single Equity Id and Single Equity Data Item with fsymId=Y:
                  $ref: >-
                    #/components/examples/cross-sectional-singleId-singleItem-fsymId
                Multiple Equity Ids and Multiple Equity Data Items:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleId-multipleItem
                Multiple Equity Ids and Multiple Equity Data Items with flatten=Y:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleId-multipleItem-flatten
                Multiple Equity Ids and Multiple Calculated Equity Data Items:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleId-multipleCalculatedItem
                Multiple Fixed Income Ids and Multiple Fixed Income Data Items:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleFixedIncomeId-multipleItem
                Small Equity Universe and Single Equity Data Item:
                  $ref: '#/components/examples/cross-sectional-smallUniv-singleItem'
                Debt Universe and Multiple Debt Data Items:
                  $ref: '#/components/examples/cross-sectional-debtUniv-multipleItem'
                Single ID and Multiple dates using ICSF with flatten = N:
                  $ref: >-
                    #/components/examples/cross-sectional-ICSF-singleItem-nonflatten
                Multiple IDs and Multiple dates using ICSF with flatten = Y:
                  $ref: >-
                    #/components/examples/cross-sectional-ICSF-multipleItem-Flatten
        '202':
          description: Batch request has been accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Request Accepted:
                  $ref: '#/components/examples/BatchStatusAcceptedResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '408':
          $ref: '#/components/responses/408'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    post:
      summary: >-
        Retrieve data items (Screening formulas) for a list of identifiers or
        defined universe.
      description: >
        The `/cross-sectional` endpoint is closely aligned with FactSet’s
        powerful data retrieval **Screening language** which is optimized for
        analysis of data items at single point in time for different entities
        and is extremely efficient for large universes.



        The `/cross-sectional` endpoint supports Long Running asynchronous
        requests up to **10 minutes** via the `batch` parameter. *This feature
        is available to Individual Users subscribed to the Performance Package
        and Performance Package Plus Performance Tiers and all Production Users.
        If you are unsure which Performance Tier you are subscribed to or you
        would like to gain access to the batch capabilities, please contact your
        FactSet Account Team or "Report Issue" above and our support teams can
        assist.*


        ***


        ### Iterated Cross-Sectional Functionality



        This endpoint supports the ability to automatically iterate through
        different cross sections over time. The **Iterated Cross-Sectional
        Functionality (ICSF)** expands the Cross-Sectional endpoint to support
        retrieving data items for *multiple dates*, allowing users to take
        advantage of the Screening engine’s efficiency even when history is
        required. 



        Use the parameters `startDate`, `endDate`, and `frequency` in the
        Cross-Sectional endpoint to provide your desired dates. Specify “0” in
        date argument of the Screening formulas provided in the formulas
        parameter and/or the universe parameter. Lastly, the Iterated
        Cross-Sectional Functionality is required to run as a `batch` request.
        Therefore, the batch parameter must be set to “Y”. 



        Access to backtesting and batch functionality is required to leverage
        the Iterated Cross-Sectional Functionality. 


        **When to use ICSF:**


        The ICSF can offer better performance than Time-Series requests when the
        date range is relatively small, and so it is recommended to use ICSF if
        the number of IDs requested is greater than the number of dates. If the
        number of dates is greater than the number of IDs in the request, it is
        recommended to use Time-Series. 


        *Note: This is a general rule of thumb and performance may vary
        depending on the formulas in use.*
      tags:
        - Cross-Sectional
      operationId: getCrossSectionalDataForList
      responses:
        '200':
          description: >-
            Gets an array of `Response Objects` for a list of IDs and Screening
            formulas.
          headers:
            api-version:
              $ref: '#/components/headers/api-version'
            api-supported-versions:
              $ref: '#/components/headers/api-supported-versions'
            api-deprecated-versions:
              $ref: '#/components/headers/api-deprecated-versions'
            chain-id:
              $ref: '#/components/headers/chain-id'
            X-RateLimit-Limit-second:
              $ref: '#/components/headers/X-RateLimit-Limit-second'
            X-RateLimit-Remaining-second:
              $ref: '#/components/headers/X-RateLimit-Remaining-second'
            X-RateLimit-Limit-day:
              $ref: '#/components/headers/X-RateLimit-Limit-day'
            X-RateLimit-Remaining-day:
              $ref: '#/components/headers/X-RateLimit-Remaining-day'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cross_sectional_response'
              examples:
                Single Equity Id and Single Equity Data Item:
                  $ref: '#/components/examples/cross-sectional-singleId-singleItem'
                Single Equity Id and Single Equity Data Item with fsymId=Y:
                  $ref: >-
                    #/components/examples/cross-sectional-singleId-singleItem-fsymId
                Multiple Equity Ids and Multiple Equity Data Items:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleId-multipleItem
                Multiple Equity Ids and Multiple Equity Data Items with flatten=Y:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleId-multipleItem-flatten
                Multiple Equity Ids and Multiple Calculated Equity Data Items:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleId-multipleCalculatedItem
                Multiple Fixed Income Ids and Multiple Fixed Income Data Items:
                  $ref: >-
                    #/components/examples/cross-sectional-multipleFixedIncomeId-multipleItem
                Small Equity Universe and Single Equity Data Item:
                  $ref: '#/components/examples/cross-sectional-smallUniv-singleItem'
                Debt Universe and Multiple Debt Data Items:
                  $ref: '#/components/examples/cross-sectional-debtUniv-multipleItem'
                Single ID and Multiple dates using ICSF with flatten = N:
                  $ref: >-
                    #/components/examples/cross-sectional-ICSF-singleItem-nonflatten
                Multiple IDs and Multiple dates using ICSF with flatten = Y:
                  $ref: >-
                    #/components/examples/cross-sectional-ICSF-multipleItem-Flatten
        '202':
          description: Batch request has been accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Request Accepted:
                  $ref: '#/components/examples/BatchStatusAcceptedResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '406':
          $ref: '#/components/responses/406'
        '408':
          $ref: '#/components/responses/408'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
      requestBody:
        $ref: '#/components/requestBodies/cross-sectional-postBody'
  /v1/batch-status:
    get:
      summary: Returns the status for a Batch Request
      description: >
        Return the status for the underlying batch request that is specified by
        the id.

          The Formula API supports Long Running asynchronous requests up to **20 minutes** via the `batch` parameter in the `/time-series` endpoint and up to **10 minutes** in the `/cross-sectional` endpoint.

          *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or "Report Issue" above and our support teams can assist.*
      tags:
        - Batch Processing
      operationId: getBatchStatus
      parameters:
        - $ref: '#/components/parameters/batchId'
      responses:
        '201':
          description: Batch Request has been completed and the response has been created.
          headers:
            Location:
              description: Path to Batch Request result.
              schema:
                type: string
              example: batch/v1/result?id=2df43e85-ea0f-45c6-bf4a-2baf4d1eaa3c
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Status Done:
                  $ref: '#/components/examples/BatchStatusDoneResponse'
        '202':
          description: Batch Request has not finished and the result has NOT been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Status Queued:
                  $ref: '#/components/examples/BatchStatusQueuedResponse'
                Batch Status Executing:
                  $ref: '#/components/examples/BatchStatusExecutingResponse'
                Batch Status Failed - Timeout:
                  $ref: '#/components/examples/BatchStatusFailedResponseTimeout'
                Batch Status Failed - Memory Limit:
                  $ref: '#/components/examples/BatchStatusFailedResponseMemoryLimit'
                Batch Status Failed - Other:
                  $ref: '#/components/examples/BatchStatusFailedResponseOther'
        '404':
          description: Not Found
          headers:
            api-version:
              $ref: '#/components/headers/api-version'
            api-supported-versions:
              $ref: '#/components/headers/api-supported-versions'
            api-deprecated-versions:
              $ref: '#/components/headers/api-deprecated-versions'
            chain-id:
              $ref: '#/components/headers/chain-id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_detail'
              example:
                id: 5EFCCA8940CAEB6E
                code: batchRequestNotFound
                title: The Batch Request was not found. It has probably expired.
                timeStamp: '2019-11-01 11:09:41.918'
      deprecated: false
    post:
      summary: Returns the status for a Batch Request
      description: >
        Return the status for the underlying batch request that is specified by
        the id.

          The Formula API supports Long Running asynchronous requests up to **20 minutes** via the `batch` parameter in the `/time-series` endpoint and up to **10 minutes** in the `/cross-sectional` endpoint.

          *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or "Report Issue" above and our support teams can assist.*
      tags:
        - Batch Processing
      operationId: getBatchStatusWithPost
      responses:
        '201':
          description: Batch Request has been completed and the response has been created.
          headers:
            Location:
              description: Path to Batch Request result.
              schema:
                type: string
              example: batch/v1/result?id=2df43e85-ea0f-45c6-bf4a-2baf4d1eaa3c
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Status Done:
                  $ref: '#/components/examples/BatchStatusDoneResponse'
        '202':
          description: Batch Request has not finished and the result has NOT been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Status Queued:
                  $ref: '#/components/examples/BatchStatusQueuedResponse'
                Batch Status Executing:
                  $ref: '#/components/examples/BatchStatusExecutingResponse'
                Batch Status Failed - Timeout:
                  $ref: '#/components/examples/BatchStatusFailedResponseTimeout'
                Batch Status Failed - Memory Limit:
                  $ref: '#/components/examples/BatchStatusFailedResponseMemoryLimit'
                Batch Status Failed - Other:
                  $ref: '#/components/examples/BatchStatusFailedResponseOther'
        '404':
          description: Not Found
          headers:
            api-version:
              $ref: '#/components/headers/api-version'
            api-supported-versions:
              $ref: '#/components/headers/api-supported-versions'
            api-deprecated-versions:
              $ref: '#/components/headers/api-deprecated-versions'
            chain-id:
              $ref: '#/components/headers/chain-id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_detail'
              example:
                id: 5EFCCA8940CAEB6E
                code: batchRequestNotFound
                title: The Batch Request was not found. It has probably expired.
                timeStamp: '2019-11-01 11:09:41.918'
      deprecated: false
      requestBody:
        $ref: '#/components/requestBodies/batch-status-postBody'
  /v1/batch-result:
    get:
      summary: Returns the response for a Batch Request
      description: >
        Returns the response data for the underlying batch request that is
        specified by the id.

          The Formula API supports Long Running asynchronous requests up to **20 minutes** via the `batch` parameter in the `/time-series` endpoint and up to **10 minutes** in the `/cross-sectional` endpoint.

          *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or "Report Issue" above and our support teams can assist.*
      tags:
        - Batch Processing
      operationId: getBatchData
      parameters:
        - $ref: '#/components/parameters/batchId'
      responses:
        '200':
          description: >-
            Request Response Object when batch request has completed and
            response is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDataResponse'
              examples:
                Time-Series Single Id and Single Data Item:
                  $ref: '#/components/examples/time-series-singleId-singleItem'
                Cross-Sectional Single Id and Single Data Item:
                  $ref: '#/components/examples/cross-sectional-singleId-singleItem'
        '202':
          description: Batch Request has not finished and the result has NOT been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Request Queued:
                  $ref: '#/components/examples/BatchResultQueuedResponse'
                Batch Request Executing:
                  $ref: '#/components/examples/BatchResultExecutingResponse'
        '404':
          description: Not Found
          headers:
            api-version:
              $ref: '#/components/headers/api-version'
            api-supported-versions:
              $ref: '#/components/headers/api-supported-versions'
            api-deprecated-versions:
              $ref: '#/components/headers/api-deprecated-versions'
            chain-id:
              $ref: '#/components/headers/chain-id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_detail'
              example:
                id: 5EFCCA8940CAEB6E
                code: batchRequestNotFound
                title: The Batch Request was not found. It has probably expired.
                timeStamp: '2019-11-01 11:09:41.918'
      deprecated: false
    post:
      summary: Returns the status for a Batch Request
      description: >
        Returns the response data for the underlying batch request that is
        specified by the id.

          The Formula API supports Long Running asynchronous requests up to **20 minutes** via the `batch` parameter in the `/time-series` endpoint and up to **10 minutes** in the `/cross-sectional` endpoint.

          *This feature is available to Individual Users subscribed to the Performance Package and Performance Package Plus Performance Tiers and all Production Users. If you are unsure which Performance Tier you are subscribed to or you would like to gain access to the batch capabilities, please contact your FactSet Account Team or "Report Issue" above and our support teams can assist.*
      tags:
        - Batch Processing
      operationId: getBatchDataWithPost
      responses:
        '200':
          description: >-
            Request Response Object when batch request has completed and
            response is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDataResponse'
              examples:
                Time-Series Single Id and Single Data Item:
                  $ref: '#/components/examples/time-series-singleId-singleItem'
                Cross-Sectional Single Id and Single Data Item:
                  $ref: '#/components/examples/cross-sectional-singleId-singleItem'
        '202':
          description: Batch Request has not finished and the result has NOT been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusResponse'
              examples:
                Batch Request Queued:
                  $ref: '#/components/examples/BatchResultQueuedResponse'
                Batch Request Executing:
                  $ref: '#/components/examples/BatchResultExecutingResponse'
        '404':
          description: Not Found
          headers:
            api-version:
              $ref: '#/components/headers/api-version'
            api-supported-versions:
              $ref: '#/components/headers/api-supported-versions'
            api-deprecated-versions:
              $ref: '#/components/headers/api-deprecated-versions'
            chain-id:
              $ref: '#/components/headers/chain-id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_detail'
              example:
                id: 5EFCCA8940CAEB6E
                code: batchRequestNotFound
                title: The Batch Request was not found. It has probably expired.
                timeStamp: '2019-11-01 11:09:41.918'
      deprecated: false
      requestBody:
        $ref: '#/components/requestBodies/batch-result-postBody'
