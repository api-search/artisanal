# Azure - https://github.com/Azure/azure-api-style-guide/blob/main/spectral.yaml - PROCESSED
# Monte - https://github.com/team-monite/api-style-guide/blob/main/spectral/


# Headers

  az-header-disallowed:
    description: Authorization, Content-type, and Accept headers should not be defined explicitly.
    message: 'Header parameter "{{value}}" should not be defined explicitly.'
    severity: warn
    # oas3 support has broken - disable for now
    formats: ['oas2']
    given:
    - $.paths[*].parameters.[?(@.in == 'header')]
    - $.paths.*[get,put,post,patch,delete,options,head].parameters.[?(@.in == 'header')]
    then:
      function: pattern
      field: name
      functionOptions:
        notMatch: '/^(authorization|content-type|accept)$/i'      

# Paths

  # DO limit your URLs characters to 0-9 A-Z a-z - . _ ~ :
  az-path-characters:
    description: Path should contain only recommended characters.
    message: Path contains non-recommended characters.
    severity: info
    formats: ['oas2', 'oas3']
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        # Check each path segment individually and ignore param segments
        # Note: the ':' is only allowed in the final path segment
        match: '^(\/([0-9A-Za-z._~-]+|{[^}]+}))*\/([0-9A-Za-z._~-]+|{[^}]*})?(:[0-9A-Za-z._~-]+)?$'

# Methods

  # GET

  az-lro-get-not-allowed:
    description: Get operations should not be long-running.
    severity: warn
    formats: ['oas2','oas3']
    given: $.paths[*].get.responses.202
    then:
      function: falsy

  # PUT

  az-lro-put-response-codes:
    description: Long-running PUT should not return a 202 response.
    severity: warn
    formats: ['oas2','oas3']
    given: $.paths[*].put.responses.202
    then:
      function: falsy

  # PATCH

  az-lro-patch-not-allowed:
    description: Patch operations should not be long-running.
    severity: warn
    formats: ['oas2','oas3']
    given: $.paths[*].patch.responses.202
    then:
      function: falsy

  #DELETE

  az-delete-response-codes:
    description: A delete operation should have a 204 response.
    message: A delete operation should have a `204` response.
    severity: warn
    formats: ['oas2','oas3']
    given: $.paths[*].delete.responses
    then:
      function: schema
      functionOptions:
        schema:
          oneOf:
          - required: ['202']
          - required: ['204']
            not:
              required: ['200']

# Operations

  az-operation-summary-or-description:
    description: Operation should have a summary or description.
    message: Operation should have a summary or description.
    severity: warn
    given:
    - $.paths[*][?( @property === 'get' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'put' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'post' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'patch' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'delete' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'options' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'head' && !@.summary && !@.description )]
    - $.paths[*][?( @property === 'trace' && !@.summary && !@.description )]
    then:
      function: falsy

# Parameters

  az-parameter-description:
    description: All parameters should have a description.
    message: Parameter should have a description.
    severity: warn
    given:
    - $.paths[*].parameters.*
    - $.paths.*[get,put,post,patch,delete,options,head].parameters.*
    then:
      field: description
      function: truthy

# Response

  # Default

  az-default-response:
    description: All operations should have a default (error) response.
    message: Operation is missing a default response.
    severity: warn
    given: $.paths.*.*.responses
    then:
      field: default
      function: truthy

  # 200

  az-success-response-body:
    description: All success responses except 204 should define a response body.
    severity: warn
    formats: ['oas2']
    # list http methods explicitly to exclude head
    # exclude 202 to avoid duplication with az-lro-response-schema rule
    given: $.paths[*][get,put,post,patch,delete].responses[?(@property >= 200 && @property < 300 && @property != '202' && @property != '204')]
    then:
      field: schema
      function: truthy  

  # 202

  az-lro-response-codes:
    description: An operation that returns 202 should not return other 2XX responses.
    severity: warn
    formats: ['oas2','oas3']
    given: $.paths[*].[post,delete].responses[?(@property == '202')]^
    then:
      function: schema
      functionOptions:
        schema:
          not:
            anyOf:
              - required: ['200']
              - required: ['201']
              - required: ['204']     

# Schema

  az-schema-description-or-title:
    description: All schemas should have a description or title.
    message: Schema should have a description or title.
    severity: warn
    formats: ['oas2', 'oas3']
    given:
    - $.definitions[?(!@.description && !@.title)]
    - $.components.schemas[?(!@.description && !@.title)]
    then:
      function: falsy

  az-schema-names-convention:
    description: Schema names should be Pascal case.
    message: Schema name should be Pascal case.
    severity: info
    formats: ['oas2']
    given: $.definitions.*~
    then:
      # Pascal case with optional "." separator
      function: pattern
      functionOptions:
        match: '^([A-Z][a-z0-9]+\.?)*[A-Z][a-z0-9]+$'

# Schema Properties

  az-property-type:
    description: All schema properties should have a defined type.
    message: Property should have a defined type.
    severity: warn
    resolved: false
    # Exclude properties that contains allOf or oneOf or anyOf to avoid false positives.
    given: $..properties[?(@object() && @.$ref == undefined && @.allOf == undefined && @.oneOf == undefined && @.anyOf == undefined)]
    then:
      field: type
      function: truthy

  az-property-names-convention:
    description: Property names should be camel case.
    message: Property name should be camel case.
    severity: warn
    # This rule can report false positives if run on the resolved spec.
    # Issue: https://github.com/stoplightio/spectral/issues/1316
    resolved: false
    given: $..[?(@.type === 'object' && @.properties)].properties.*~
    then:
      function: casing
      functionOptions:
        type: camel

  az-additional-properties-and-properties:
    description: Don't specify additionalProperties as a sibling of properties.
    severity: warn
    formats: ['oas2', 'oas3']
    given: $..[?(@object() && @.type === 'object' && @.properties)]
    then:
      field: additionalProperties
      function: falsy

  az-property-description:
    description: All schema properties should have a description.
    message: Property should have a description.
    severity: warn
    resolved: false
    given: $..properties[?(@object() && @.$ref == undefined)]
    then:
      field: description
      function: truthy      

# Types

  az-boolean-naming-convention:
    description: Do not use "is" prefix in names of boolean values
    severity: warn
    formats: ['oas2','oas3']
    given: $
    then:
      function: naming-convention
      functionOptions:
        type: boolean
        notMatch: '^is[A-Z]'



  az-security-definition-description:
    description: A security definition should have a description.
    message: Security definition should have a description.
    severity: warn
    formats: ['oas2', 'oas3']
    given:
    - $.securityDefinitions[*]
    - $.components.securitySchemes[*]
    then:
      field: description
      function: truthy

